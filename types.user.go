package notionapi

import uuid "github.com/google/uuid"

// Code generated by notion.codegen; DO NOT EDIT.

// https://developers.notion.com/reference/user

// The User object represents a user in a Notion workspace. Users include full workspace members, and integrations. Guests are not included. You can find more information about members and guests in this guide.
type User struct {
	// These fields are shared by all users, including people and bots. Fields marked with * are always present.
	Object    string    `json:"object"`     // Always "user"
	ID        uuid.UUID `json:"id"`         // Unique identifier for this user.
	Type      string    `json:"type"`       // Type of the user. Possible values are "person" and "bot".
	Name      *string   `json:"name"`       // User's name, as displayed in Notion.
	AvatarURL *string   `json:"avatar_url"` // Chosen avatar image.

	Person *Person `json:"person" specific:"type"` // Properties only present for non-bot users.
	Bot    *Bot    `json:"bot" specific:"type"`    // If you're using GET /v1/users/me or GET /v1/users/{{your_bot_id}}, then this field returns data about the bot, including owner, owner.type, and workspace_name. These properties are detailed below.
}

func (p User) MarshalJSON() ([]byte, error) {
	type Alias User
	return marshalByType(Alias(p), p.Type)
}

// The User object represents a user in a Notion workspace. Users include full workspace members, and integrations. Guests are not included. You can find more information about members and guests in this guide.
type PartialUser struct {
	// These fields are shared by all users, including people and bots. Fields marked with * are always present.
	Object string    `json:"object"` // Always "user"
	ID     uuid.UUID `json:"id"`     // Unique identifier for this user.
}

// User objects that represent people have the type property set to "person". These objects also have the following properties:
type Person struct {
	Email string `json:"email"` // Email address of person. This is only present if an integration has user capabilities that allow access to email addresses.
}

// A user object's type property is"bot" when the user object represents a bot. A bot user object has the following properties:
type Bot struct{}
