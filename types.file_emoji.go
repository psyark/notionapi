package notionapi

// Code generated by notion.codegen; DO NOT EDIT.

// https://developers.notion.com/reference/file-object

type FileOrEmoji struct {
	Type     string                    `json:"type"`                     // Type of this file object. Possible values are: "external", "file".
	File     FilesUploadedToNotionData `json:"file" specific:"type"`     // All files hosted by Notion have a type of "file". File objects contain the following information within the file property: ðŸ“˜Links to files hosted by Notion will expire.When retrieving files hosted by Notion, within the file property, the expiry_time key contains the timestamp that the link expires.
	External ExternalFileData          `json:"external" specific:"type"` // All external file objects have a type of "external". An external file is any URL that isn't hosted by Notion. External file objects contain the following information within the external property:
	Emoji    string                    `json:"emoji" specific:"type"`    // Emoji character.
}

func (p FileOrEmoji) MarshalJSON() ([]byte, error) {
	type Alias FileOrEmoji
	return marshalByType(Alias(p), p.Type)
}

/*
Each file object contains the following keys. In addition, it must contain a key corresponding with the value of type. The value is an object containing type-specific configuration. The type-specific configurations are described in the sections below.

Externally hosted files vs. Files hosted by Notion
For files and URLs hosted outside of Notion, we support retrieving the link as well as updating it to a different link. We don't currently support uploading files to Notion through the API, however, for files already uploaded to Notion, we support retrieving the file URL. The table below details what's supported for Embed, Image, Video, Audio, and File blocks, as well as page icon and page cover image properties.
*/
type File struct {
	Type     string                    `json:"type"`                     // Type of this file object. Possible values are: "external", "file".
	File     FilesUploadedToNotionData `json:"file" specific:"type"`     // All files hosted by Notion have a type of "file". File objects contain the following information within the file property: ðŸ“˜Links to files hosted by Notion will expire.When retrieving files hosted by Notion, within the file property, the expiry_time key contains the timestamp that the link expires.
	External ExternalFileData          `json:"external" specific:"type"` // All external file objects have a type of "external". An external file is any URL that isn't hosted by Notion. External file objects contain the following information within the external property:
}

func (p File) MarshalJSON() ([]byte, error) {
	type Alias File
	return marshalByType(Alias(p), p.Type)
}

// Files uploaded to Notion objects
type FilesUploadedToNotionData struct {
	URL        string        `json:"url"`         // Authenticated S3 URL to the file. The file URL will be valid for 1 hour but updated links can be requested if required.
	ExpiryTime ISO8601String `json:"expiry_time"` // Date and time when this will expire. Formatted as an ISO 8601 date time string.
}

// External file objects
type ExternalFileData struct {
	URL string `json:"url"` // Link to the externally hosted content.
}

// https://developers.notion.com/reference/emoji-object

// Emoji objects are used to set the page icon to an emoji.
type Emoji struct {
	Type  string `json:"type"`  // Type of page icon. Possible values are: "emoji".
	Emoji string `json:"emoji"` // Emoji character.
}
